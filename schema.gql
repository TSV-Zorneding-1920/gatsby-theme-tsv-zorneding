### Type definitions saved at 2019-12-12T06:38:38.409Z ###

enum ImageFormat {
  NO_CHANGE
  JPG
  PNG
  WEBP
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  resolutions(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResolutions @deprecated(reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes @deprecated(reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type MarkdownHeading {
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: [], many: false) @derivedTypes @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
  fileAbsolutePath: String
  fields: MarkdownRemarkFields
}

type MarkdownRemarkFrontmatter @derivedTypes {
  title: String
  templateKey: String
  showTitle: Boolean
  sections: [MarkdownRemarkFrontmatterSections]
  date: Date @dateformat
  featured: Boolean
  sticky: Boolean
  featuredimage: File @fileByRelativePath
  tags: [String]
}

type MarkdownRemarkFrontmatterSections @derivedTypes {
  body: String
  type: String
  images: [MarkdownRemarkFrontmatterSectionsImages]
  count: Int
  offset: Int
  tags: [String]
  info: [MarkdownRemarkFrontmatterSectionsInfo]
  title: String
  image: File @fileByRelativePath
  html: String
  headline: String
  link: String
  element: [MarkdownRemarkFrontmatterSectionsElement]
  nodes: [MarkdownRemarkFrontmatterSectionsNodes]
}

type MarkdownRemarkFrontmatterSectionsImages {
  image: File @fileByRelativePath
}

type File implements Node @dontInfer {
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime: Date @dateformat
  accessTime: Date @dateformat
  changeTime: Date @dateformat
  birthTime: Date @dateformat
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Float
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  atime: Date @dateformat
  mtime: Date @dateformat
  ctime: Date @dateformat
}

type MarkdownRemarkFrontmatterSectionsInfo {
  image_small: File @fileByRelativePath
  body: String
  title: String
}

type MarkdownRemarkFrontmatterSectionsElement {
  body: String
  icon: String
  title: String
}

type MarkdownRemarkFrontmatterSectionsNodes {
  body: String
  image: File @fileByRelativePath
  title: String
  link: String
}

type MarkdownRemarkFields {
  slug: String
}

type DataYaml implements Node @derivedTypes @dontInfer {
  menu_entry: [DataYamlMenu_entry]
}

type DataYamlMenu_entry @derivedTypes {
  page: String
  title: String
  menu_entry: [DataYamlMenu_entryMenu_entry]
}

type DataYamlMenu_entryMenu_entry @derivedTypes {
  title: String
  page: String
  menu_entry: [DataYamlMenu_entryMenu_entryMenu_entry]
}

type DataYamlMenu_entryMenu_entryMenu_entry {
  title: String
  page: String
}

type EventsYaml implements Node @dontInfer {
  description: String
  label: String
  date: Date @dateformat
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime: Date @dateformat
  accessTime: Date @dateformat
  changeTime: Date @dateformat
  birthTime: Date @dateformat
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Float
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  birthtimeMs: Float
  atime: Date @dateformat
  mtime: Date @dateformat
  ctime: Date @dateformat
  birthtime: Date @dateformat
}